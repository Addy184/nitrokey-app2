# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'nitrokeyapp/ui/securitydialog.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_securitydialog(object):
    def setupUi(self, securitydialog):
        securitydialog.setObjectName("securitydialog")
        securitydialog.resize(551, 669)
        self.ST_SecurityTextLabel = QtWidgets.QLabel(securitydialog)
        self.ST_SecurityTextLabel.setGeometry(QtCore.QRect(30, 20, 491, 601))
        self.ST_SecurityTextLabel.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.ST_SecurityTextLabel.setWordWrap(True)
        self.ST_SecurityTextLabel.setObjectName("ST_SecurityTextLabel")
        self.ST_OkButton = QtWidgets.QPushButton(securitydialog)
        self.ST_OkButton.setGeometry(QtCore.QRect(390, 630, 75, 27))
        self.ST_OkButton.setDefault(True)
        self.ST_OkButton.setObjectName("ST_OkButton")
        self.ST_CheckBox = QtWidgets.QCheckBox(securitydialog)
        self.ST_CheckBox.setGeometry(QtCore.QRect(51, 633, 331, 20))
        self.ST_CheckBox.setObjectName("ST_CheckBox")

        self.retranslateUi(securitydialog)
        QtCore.QMetaObject.connectSlotsByName(securitydialog)

    def retranslateUi(self, securitydialog):
        _translate = QtCore.QCoreApplication.translate
        securitydialog.setWindowTitle(_translate("securitydialog", "Dialog"))
        self.ST_SecurityTextLabel.setText(_translate("securitydialog", "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt; font-weight:600;\">Security Information</span></p><p>Please read the following carefully.</p><p><span style=\" font-weight:600;\">PIN Protection</span></p><p>Nitrokey is protected by both a user PIN and an admin PIN. Your user PIN can unlock the encrypted storage, password safe, smart card and (if enabled) One-Time Passwords (OTP). OTPs aren\'t PIN-protected by default because they are only used as a secondary factor. The smart card is unlocked whenever the user PIN is entered, regardless of the function for which the PIN is entered. The admin PIN can be used to configure settings and to add or change entries. You must change the default PINs and keep them confidential. If the user PIN and admin PIN are entered incorrectly three times each, or if the smart card has been reset to factory settings, all your sensitive data will be permanently lost.</p><p><span style=\" font-weight:600;\">Physical Protection</span></p><p>All sensitive data is encrypted and secured against physical attacks. This does not apply to One-Time Passwords (OTP) because they are only used as a secondary factor.</p><p><span style=\" font-weight:600;\">Hidden Volumes</span></p><p>Hidden volumes require that the mass storage be initialised with random data. Hidden volumes are protected by both a user PIN and a separate password which can be different for each hidden volume. Without knowing both the user PIN and password, the hidden volume cannot be found and its existence can therefore neither be proven nor disproven. The password for the hidden volume must be strong and long enough to withstand a brute force attack. The hidden volumes are however stored on a flash storage with integrated wear levelling, meaning that information could potentially be leaked to a sophisticated attacker, thereby revealing the existence of hidden volumes.</p></body></html>"))
        self.ST_OkButton.setText(_translate("securitydialog", "OK"))
        self.ST_CheckBox.setText(_translate("securitydialog", "I read and understood this security warning"))
